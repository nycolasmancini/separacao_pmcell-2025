version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: pmcell-db-prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-pmcell_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-pmcell_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pmcell-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pmcell_user} -d ${DB_NAME:-pmcell_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: pmcell-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-pmcell_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-pmcell_db}
      - SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ALLOWED_ORIGINS=${FRONTEND_URL}
      - DEBUG=False
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    volumes:
      - backend_logs:/app/logs
    networks:
      - pmcell-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: pmcell-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${BACKEND_URL}/api/v1
    networks:
      - pmcell-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: pmcell-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pmcell-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  backend_logs:
  redis_data:

networks:
  pmcell-network:
    driver: bridge