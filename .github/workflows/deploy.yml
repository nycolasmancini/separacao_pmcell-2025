name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL }}

  deploy-railway:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment != 'staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Deploy Backend to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway environment use production
        
        # Deploy backend service
        railway up --service backend --detach
        
        # Set environment variables
        railway variables set \
          SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
          ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
          ALLOWED_ORIGINS="${{ secrets.FRONTEND_URL }}" \
          DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --service backend

    - name: Deploy Frontend to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway environment use production
        
        # Deploy frontend service
        railway up --service frontend --detach
        
        # Set environment variables
        railway variables set \
          VITE_API_URL="${{ secrets.BACKEND_URL }}/api/v1" \
          --service frontend

    - name: Wait for deployment
      run: |
        echo "Waiting for Railway deployment to complete..."
        sleep 60

    - name: Health check
      run: |
        # Check backend health
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
        
        # Check frontend health
        curl -f ${{ secrets.FRONTEND_URL }}/health || exit 1

  deploy-render:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

    - name: Wait for deployment
      run: |
        echo "Waiting for Render deployment to complete..."
        sleep 120

    - name: Health check
      run: |
        # Check application health
        curl -f ${{ secrets.RENDER_APP_URL }}/health || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-render]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: ${{ needs.build-and-push.outputs.backend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ${{ needs.build-and-push.outputs.frontend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.deploy-railway.result }}" == "success" ]]; then
          echo "✅ Railway deployment successful" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ secrets.BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ secrets.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-render.result }}" == "success" ]]; then
          echo "✅ Render deployment successful" >> $GITHUB_STEP_SUMMARY
          echo "- Application: ${{ secrets.RENDER_APP_URL }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi