name: Test Suite

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Set environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=test-admin-password" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test with Docker Compose
      run: |
        # Create test environment file
        cat > .env.test << EOF
        DB_USER=test_user
        DB_PASSWORD=test_password
        DB_NAME=test_db
        JWT_SECRET_KEY=test-jwt-secret-key-for-integration
        ADMIN_PASSWORD=test-admin-password
        FRONTEND_URL=http://localhost:3000
        BACKEND_URL=http://localhost:8000
        EOF
        
        # Start services
        docker-compose -f docker-compose.prod.yml --env-file .env.test up -d --build
        
        # Wait for services to be ready
        sleep 30
        
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend health  
        curl -f http://localhost/health || exit 1
        
        # Cleanup
        docker-compose -f docker-compose.prod.yml down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-integration, security-scan]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-backend.result }}" != "success" || "${{ needs.test-frontend.result }}" != "success" || "${{ needs.test-integration.result }}" != "success" ]]; then
          echo "Quality gate failed: Tests did not pass"
          exit 1
        fi
        echo "Quality gate passed: All tests successful"